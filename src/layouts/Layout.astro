---
import { getCurrentLanguage, t, getAlternateLanguage, type Language } from '../utils/i18n';
import '../styles/global.css';

export interface Props {
	title?: string;
	lang?: Language;
}

const { title, lang } = Astro.props;
// Use default English, language will be set dynamically on client
const currentLang: Language = 'en';
const pageTitle = title || t('page.title', currentLang);
const alternateLang = getAlternateLanguage(currentLang);
---

<!doctype html>
<html lang={currentLang} class="scroll-smooth" style="visibility: hidden;" data-lang-loading="true">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/png" href="/favicon.png" />
		<meta name="generator" content={Astro.generator} />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Merriweather:ital,wght@0,300;0,400;0,700;1,300;1,400&display=swap" rel="stylesheet">
		<title>{pageTitle}</title>
		<style>
			/* Pre-hide wrong language content to prevent flash */
			html[data-initial-lang="it"] [data-lang="en"] { display: none !important; }
			html[data-initial-lang="en"] [data-lang="it"] { display: none !important; }
			/* Show correct language content immediately */
			html[data-initial-lang="it"] [data-lang="it"] { display: block !important; }
			html[data-initial-lang="en"] [data-lang="en"] { display: block !important; }
		</style>
		<script>
			// Pre-load language detection to prevent flash - execute immediately
			(function() {
				const savedLang = localStorage.getItem('language-preference');
				if (savedLang && (savedLang === 'it' || savedLang === 'en')) {
					document.documentElement.setAttribute('data-initial-lang', savedLang);
				} else {
					const browserLang = navigator.language.toLowerCase();
					const detectedLang = browserLang.startsWith('it') ? 'it' : 'en';
					document.documentElement.setAttribute('data-initial-lang', detectedLang);
				}
			})();
		</script>
	</head>
	<body class="bg-warm-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 font-sans antialiased min-h-screen transition-colors duration-200">
		<nav class="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50">
			<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
				<div class="flex justify-between items-center h-16">
					<a href="/" class="text-xl font-semibold text-gray-900 dark:text-gray-100 hover:text-warm-600 dark:hover:text-warm-400 transition-colors">
						The Nomad Upupa
					</a>
					
					<!-- Desktop Navigation -->
					<div class="hidden md:flex items-center space-x-6">
						<span data-lang="en">
							<a href="/blog/" class="text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 transition-colors">{t('nav.archive', 'en')}</a>
							<a href="/map/" class="text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 transition-colors ml-6">{t('nav.map', 'en')}</a>
							<a href="/about/" class="text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 transition-colors ml-6">{t('nav.about', 'en')}</a>
						</span>
						<span data-lang="it" style="display: none;">
							<a href="/blog/" class="text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 transition-colors">{t('nav.archive', 'it')}</a>
							<a href="/map/" class="text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 transition-colors ml-6">{t('nav.map', 'it')}</a>
							<a href="/about/" class="text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 transition-colors ml-6">{t('nav.about', 'it')}</a>
						</span>
						<button id="lang-toggle" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors" aria-label="Switch language">
							<span class="text-sm font-medium" id="lang-button-text">
								<span data-lang="en">IT</span>
								<span data-lang="it" style="display: none;">EN</span>
							</span>
						</button>
						<button id="theme-toggle" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors" aria-label="Toggle theme">
							<svg id="theme-toggle-light-icon" class="w-5 h-5 hidden dark:block" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
							</svg>
							<svg id="theme-toggle-dark-icon" class="w-5 h-5 block dark:hidden" fill="currentColor" viewBox="0 0 20 20">
								<path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
							</svg>
						</button>
					</div>

					<!-- Mobile Navigation -->
					<div class="md:hidden">
						<button id="mobile-menu-button" class="p-2 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors" aria-label="Open menu">
							<svg id="menu-open-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
							</svg>
							<svg id="menu-close-icon" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
				</div>

				<!-- Mobile Menu -->
				<div id="mobile-menu" class="hidden md:hidden border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
					<div class="px-2 pt-2 pb-3 space-y-1">
						<span data-lang="en">
							<a href="/blog/" class="block px-3 py-2 text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md transition-colors">{t('nav.archive', 'en')}</a>
							<a href="/map/" class="block px-3 py-2 text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md transition-colors">{t('nav.map', 'en')}</a>
							<a href="/about/" class="block px-3 py-2 text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md transition-colors">{t('nav.about', 'en')}</a>
						</span>
						<span data-lang="it" style="display: none;">
							<a href="/blog/" class="block px-3 py-2 text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md transition-colors">{t('nav.archive', 'it')}</a>
							<a href="/map/" class="block px-3 py-2 text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md transition-colors">{t('nav.map', 'it')}</a>
							<a href="/about/" class="block px-3 py-2 text-gray-700 dark:text-gray-300 hover:text-warm-600 dark:hover:text-warm-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md transition-colors">{t('nav.about', 'it')}</a>
						</span>
						
						<!-- Settings separator -->
						<div class="border-t border-gray-200 dark:border-gray-700 my-2"></div>
						
						<!-- Language and Theme toggles -->
						<div class="px-3 py-2 space-y-3">
							<div class="flex items-center justify-between">
								<span class="text-sm text-gray-600 dark:text-gray-400">
									<span data-lang="en">{t('settings.language', 'en')}</span>
									<span data-lang="it" style="display: none;">{t('settings.language', 'it')}</span>
								</span>
								<button id="lang-toggle-mobile" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors" aria-label="Switch language">
									<span class="text-sm font-medium" id="lang-button-text-mobile">
										<span data-lang="en">IT</span>
										<span data-lang="it" style="display: none;">EN</span>
									</span>
								</button>
							</div>
							<div class="flex items-center justify-between">
								<span class="text-sm text-gray-600 dark:text-gray-400">
									<span data-lang="en">{t('settings.theme', 'en')}</span>
									<span data-lang="it" style="display: none;">{t('settings.theme', 'it')}</span>
								</span>
								<button id="theme-toggle-mobile" class="p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors" aria-label="Toggle theme">
									<svg id="theme-toggle-light-icon-mobile" class="w-5 h-5 hidden dark:block" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
									</svg>
									<svg id="theme-toggle-dark-icon-mobile" class="w-5 h-5 block dark:hidden" fill="currentColor" viewBox="0 0 20 20">
										<path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
									</svg>
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
		</nav>
		<main class="flex-1">
			<slot />
		</main>
		<footer class="bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 mt-16">
			<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
				<div class="text-center text-gray-500 dark:text-gray-400 text-sm">
					<p data-lang="en">&copy; {t('footer.copyright', 'en')}</p>
					<p data-lang="it" style="display: none;">&copy; {t('footer.copyright', 'it')}</p>
				</div>
			</div>
		</footer>
	</body>
</html>

<script>
	// Language system initialization
	function getCurrentLanguage() {
		const saved = localStorage.getItem('language-preference');
		if (saved && (saved === 'it' || saved === 'en')) {
			return saved;
		}
		
		// Check browser language for first visit
		const browserLang = navigator.language.toLowerCase();
		if (browserLang.startsWith('it')) {
			return 'it';
		}
		
		return 'en';
	}
	
	function updateLanguageContent(lang) {
		// Hide all language-specific content
		document.querySelectorAll('[data-lang]').forEach(el => {
			el.style.display = 'none';
		});
		
		// Show content for current language
		document.querySelectorAll(`[data-lang="${lang}"]`).forEach(el => {
			el.style.display = '';
		});
		
		// Update page title for multilingual posts
		if (window.postTitles && window.postTitles[lang]) {
			document.title = window.postTitles[lang];
		}
		
		// Fix map rendering when switching languages
		setTimeout(() => {
			if (window.mapEn && lang === 'en') {
				window.mapEn.invalidateSize();
			}
			if (window.mapIt && lang === 'it') {
				window.mapIt.invalidateSize();
			}
		}, 100);
		
		// Update document attributes
		document.documentElement.setAttribute('lang', lang);
		document.documentElement.setAttribute('data-language', lang);
		document.documentElement.setAttribute('data-initial-lang', lang);
	}
	
	function setLanguage(lang) {
		localStorage.setItem('language-preference', lang);
		updateLanguageContent(lang);
	}
	
	// Expose functions globally for other components
	window.updateLanguageContent = updateLanguageContent;
	window.getCurrentLanguage = getCurrentLanguage;
	window.setLanguage = setLanguage;
	
	// Initialize language system when DOM is ready
	document.addEventListener('DOMContentLoaded', () => {
		const currentLang = getCurrentLanguage();
		updateLanguageContent(currentLang);
		// Show page after language is set
		document.documentElement.style.visibility = 'visible';
		document.documentElement.removeAttribute('data-lang-loading');
		
		// Language toggle functionality - moved inside DOMContentLoaded
		const langToggle = document.getElementById('lang-toggle');
		const langToggleMobile = document.getElementById('lang-toggle-mobile');
		
		function handleLanguageToggle() {
			const currentLang = getCurrentLanguage();
			const newLang = currentLang === 'en' ? 'it' : 'en';
			setLanguage(newLang);
		}
		
		langToggle?.addEventListener('click', handleLanguageToggle);
		langToggleMobile?.addEventListener('click', handleLanguageToggle);
	});

	// Theme toggle functionality
	const themeToggle = document.getElementById('theme-toggle');
	const themeToggleMobile = document.getElementById('theme-toggle-mobile');
	const html = document.documentElement;
	
	// Check for saved theme preference or default to light mode
	const savedTheme = localStorage.getItem('theme');
	if (savedTheme) {
		html.classList.toggle('dark', savedTheme === 'dark');
	} else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
		html.classList.add('dark');
	}
	
	// Theme toggle for desktop
	themeToggle?.addEventListener('click', () => {
		html.classList.toggle('dark');
		localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
	});
	
	// Theme toggle for mobile
	themeToggleMobile?.addEventListener('click', () => {
		html.classList.toggle('dark');
		localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
	});
	
	// Mobile menu functionality
	const mobileMenuButton = document.getElementById('mobile-menu-button');
	const mobileMenu = document.getElementById('mobile-menu');
	const menuOpenIcon = document.getElementById('menu-open-icon');
	const menuCloseIcon = document.getElementById('menu-close-icon');
	
	mobileMenuButton?.addEventListener('click', () => {
		const isHidden = mobileMenu?.classList.contains('hidden');
		
		if (isHidden) {
			mobileMenu?.classList.remove('hidden');
			menuOpenIcon?.classList.add('hidden');
			menuCloseIcon?.classList.remove('hidden');
		} else {
			mobileMenu?.classList.add('hidden');
			menuOpenIcon?.classList.remove('hidden');
			menuCloseIcon?.classList.add('hidden');
		}
	});
	
	// Close mobile menu when clicking on a link
	const mobileMenuLinks = mobileMenu?.querySelectorAll('a');
	mobileMenuLinks?.forEach(link => {
		link.addEventListener('click', () => {
			mobileMenu?.classList.add('hidden');
			menuOpenIcon?.classList.remove('hidden');
			menuCloseIcon?.classList.add('hidden');
		});
	});
</script>
