---
import Layout from '../layouts/Layout.astro';
import HeroSection from '../components/HeroSection.astro';
import PostsGrid from '../components/PostsGrid.astro';
import DiscoverSection from '../components/DiscoverSection.astro';
import { getCollection } from 'astro:content';
import { t, type Language } from '../utils/i18n';

export interface Props {
  lang?: Language;
}

// Get posts based on language
const allPosts = await getCollection('posts');

// Helper function to resolve multilingual frontmatter
function resolveMultilingualData(data: any, targetLang: Language) {
  const resolved = { ...data };
  Object.keys(resolved).forEach(key => {
    const value = resolved[key];
    if (typeof value === 'object' && value !== null && !Array.isArray(value) && !value.lat) {
      if (value[targetLang]) {
        resolved[key] = value[targetLang];
      } else if (value.en) {
        resolved[key] = value.en; // Fallback to English
      }
    } else if (Array.isArray(value)) {
      resolved[key] = value.map((item: any) => {
        if (item.name && typeof item.name === 'object') {
          if (item.name[targetLang]) {
            return { ...item, name: item.name[targetLang] };
          } else if (item.name.en) {
            return { ...item, name: item.name.en };
          }
        }
        return item;
      });
    }
  });
  return resolved;
}

// Process posts for both languages - simplified approach
const processedPostsEn = allPosts.map(post => {
  let processedData = { ...post.data };
  
  // Resolve multilingual frontmatter for English
  processedData = resolveMultilingualData(processedData, 'en');
  processedData.lang = 'en';
  
  return {
    ...post,
    data: processedData
  };
});

const processedPostsIt = allPosts.map(post => {
  let processedData = { ...post.data };
  
  // Resolve multilingual frontmatter for Italian
  processedData = resolveMultilingualData(processedData, 'it');
  processedData.lang = 'it';
  
  return {
    ...post,
    data: processedData
  };
});

const recentPostsEn = processedPostsEn
  .sort((a, b) => new Date(b.data.eventTime).getTime() - new Date(a.data.eventTime).getTime())
  .slice(0, 3);

const recentPostsIt = processedPostsIt
  .sort((a, b) => new Date(b.data.eventTime).getTime() - new Date(a.data.eventTime).getTime())
  .slice(0, 3);
---

<Layout>
  
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- Hero Section - English -->
    <div data-lang="en">
      <HeroSection 
        title={t('hero.title', 'en')}
        description={t('hero.description', 'en')}
      />

      <!-- Recent Posts -->
      <PostsGrid 
        posts={recentPostsEn}
        lang="en"
        title={t('posts.recent', 'en')}
        showViewAll={true}
        viewAllUrl="/blog/"
        viewAllText={t('posts.viewAll', 'en')}
      />

      <!-- Discover More Section -->
      <DiscoverSection 
        title={t('discover.title', 'en')}
        description={t('discover.description', 'en')}
        mapUrl="/map/"
        mapText={t('discover.map', 'en')}
        aboutUrl="/about/"
        aboutText={t('discover.about', 'en')}
      />
    </div>

    <!-- Hero Section - Italian -->
    <div data-lang="it" style="display: none;">
      <HeroSection 
        title={t('hero.title', 'it')}
        description={t('hero.description', 'it')}
      />

      <!-- Recent Posts -->
      <PostsGrid 
        posts={recentPostsIt}
        lang="it"
        title={t('posts.recent', 'it')}
        showViewAll={true}
        viewAllUrl="/blog/"
        viewAllText={t('posts.viewAll', 'it')}
      />

      <!-- Discover More Section -->
      <DiscoverSection 
        title={t('discover.title', 'it')}
        description={t('discover.description', 'it')}
        mapUrl="/map/"
        mapText={t('discover.map', 'it')}
        aboutUrl="/about/"
        aboutText={t('discover.about', 'it')}
      />
    </div>
  </div>
</Layout>