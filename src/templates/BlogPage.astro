---
import Layout from '../layouts/Layout.astro';
import PageHeader from '../components/PageHeader.astro';
import PostsList from '../components/PostsList.astro';
import ReadingGuide from '../components/ReadingGuide.astro';
import { getCollection } from 'astro:content';
import { t, type Language } from '../utils/i18n';

export interface Props {
  lang?: Language;
}

const { lang = 'en' } = Astro.props;

// Get posts based on language
const allPosts = await getCollection('posts');

// Helper function to resolve multilingual frontmatter
function resolveMultilingualData(data: any, targetLang: Language) {
  const resolved = { ...data };
  Object.keys(resolved).forEach(key => {
    const value = resolved[key];
    if (typeof value === 'object' && value !== null && !Array.isArray(value) && !value.lat) {
      if (value[targetLang]) {
        resolved[key] = value[targetLang];
      } else if (value.en) {
        resolved[key] = value.en; // Fallback to English
      }
    } else if (Array.isArray(value)) {
      resolved[key] = value.map((item: any) => {
        if (item.name && typeof item.name === 'object') {
          if (item.name[targetLang]) {
            return { ...item, name: item.name[targetLang] };
          } else if (item.name.en) {
            return { ...item, name: item.name.en };
          }
        }
        return item;
      });
    }
  });
  return resolved;
}

// Process posts for both languages
const processedPostsEn = allPosts.flatMap(post => {
  if (post.slug.startsWith('en/')) {
    return [{
      ...post,
      data: { ...post.data, lang: 'en' as Language }
    }];
  } else if (!post.slug.startsWith('en/') && !post.slug.startsWith('it/')) {
    if (post.body.includes('<!-- en -->') || post.body.includes('<!-- it -->')) {
      const resolvedData = resolveMultilingualData(post.data, 'en');
      resolvedData.lang = 'en';
      return [{
        ...post,
        data: resolvedData
      }];
    } else {
      return [{
        ...post,
        data: { ...post.data, lang: 'en' as Language }
      }];
    }
  }
  return [];
});

const processedPostsIt = allPosts.flatMap(post => {
  if (post.slug.startsWith('it/')) {
    return [{
      ...post,
      data: { ...post.data, lang: 'it' as Language }
    }];
  } else if (!post.slug.startsWith('en/') && !post.slug.startsWith('it/')) {
    if (post.body.includes('<!-- en -->') || post.body.includes('<!-- it -->')) {
      const resolvedData = resolveMultilingualData(post.data, 'it');
      resolvedData.lang = 'it';
      return [{
        ...post,
        data: resolvedData
      }];
    }
  }
  return [];
});

const sortedPostsEn = processedPostsEn.sort((a, b) => 
  b.data.eventTime.getTime() - a.data.eventTime.getTime()
);

const sortedPostsIt = processedPostsIt.sort((a, b) => 
  b.data.eventTime.getTime() - a.data.eventTime.getTime()
);
---

<Layout>
  <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <!-- English Version -->
    <div data-lang="en">
      <PageHeader
        title={t('blog.title', 'en')}
        description={t('blog.description', 'en')}
      />

      <!-- Reading Guide -->
      <ReadingGuide lang="en" />

      <PostsList 
        posts={sortedPostsEn}
        lang="en"
        emptyMessage={t('blog.empty', 'en')}
      />
    </div>

    <!-- Italian Version -->
    <div data-lang="it" style="display: none;">
      <PageHeader
        title={t('blog.title', 'it')}
        description={t('blog.description', 'it')}
      />

      <!-- Reading Guide -->
      <ReadingGuide lang="it" />

      <PostsList 
        posts={sortedPostsIt}
        lang="it"
        emptyMessage={t('blog.empty', 'it')}
      />
    </div>
  </div>
</Layout>