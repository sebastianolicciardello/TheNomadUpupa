---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const allPosts = await getCollection('posts');
const englishPosts = allPosts.filter(post => post.slug.startsWith('en/'));
const postsWithCoords = englishPosts
  .filter(post => {
    // Check if post has coords or has locations
    const hasCoords = post.data.coords && post.data.coords.lat && post.data.coords.lon;
    const hasLocations = post.data.locations && post.data.locations.length > 0;
    return hasCoords || hasLocations;
  })
  .map(post => {
    // Get main location coordinates for map display
    let mainCoords = null;
    if (post.data.locations && post.data.locations.length > 0) {
      const mainLocation = post.data.locations.find(loc => loc.isMain) || post.data.locations[0];
      mainCoords = mainLocation.coords;
    } else if (post.data.coords) {
      mainCoords = post.data.coords;
    }
    return { ...post, mainCoords };
  })
  .sort((a, b) => new Date(b.data.eventTime).getTime() - new Date(a.data.eventTime).getTime());
---

<Layout title="Places Map - The Nomad Upupa">
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8 lg:py-12">
    <div class="mb-6 sm:mb-8 lg:mb-12">
      <h1 class="text-2xl sm:text-3xl md:text-4xl font-serif font-bold text-gray-900 dark:text-gray-100 mb-4">
        Places Map
      </h1>
      <p class="text-base sm:text-lg text-gray-600 dark:text-gray-400 mb-4 sm:mb-8">
        An emotional geography of the places that have marked my journey.
      </p>
    </div>

    {postsWithCoords.length > 0 ? (
      <div class="grid lg:grid-cols-3 gap-6 lg:gap-8">
        <!-- Mappa -->
        <div class="lg:col-span-2">
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
            <div id="global-map" class="h-64 sm:h-80 md:h-96 lg:h-[600px] relative">
              <div id="map-loading" class="absolute inset-0 flex items-center justify-center bg-gray-100 dark:bg-gray-700">
                <div class="text-gray-500 dark:text-gray-400">Loading map...</div>
              </div>
            </div>
          </div>
        </div>

        <!-- Lista dei luoghi -->
        <div class="space-y-4 lg:order-last order-first">
          <h2 class="text-xl font-serif font-semibold text-gray-900 dark:text-gray-100 mb-4">
            Reflection Places
          </h2>
          <div class="space-y-3 max-h-64 lg:max-h-[600px] overflow-y-auto">
            {postsWithCoords.map((post, index) => (
              <div class="bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200">
                <h3 class="font-serif font-semibold text-gray-900 dark:text-gray-100 mb-2">
                  <a 
                    href={`/posts/${post.slug.replace('en/', '')}/`}
                    class="hover:text-warm-600 dark:hover:text-warm-400 transition-colors"
                  >
                    {post.data.title}
                  </a>
                </h3>
                <time class="text-sm text-gray-500 dark:text-gray-400 mb-2 block">
                  {new Date(post.data.eventTime).toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </time>
                <button 
                  onclick={`focusMarker(${index})`}
                  class="text-sm text-warm-600 dark:text-warm-400 hover:text-warm-700 dark:hover:text-warm-300 transition-colors font-medium"
                  id={`location-${index}`}
                >
                  üìç Loading location...
                </button>
              </div>
            ))}
          </div>
        </div>
      </div>
    ) : (
      <div class="text-center py-12">
        <div class="text-6xl mb-4">üó∫Ô∏è</div>
        <p class="text-gray-500 dark:text-gray-400 text-lg">
          No georeferenced places yet. The first journeys will arrive soon.
        </p>
      </div>
    )}
  </div>

  {postsWithCoords.length > 0 && (
    <>
      <link rel="stylesheet" href="/libs/leaflet/leaflet.css" is:inline />
      <script src="/libs/leaflet/leaflet.js" is:inline></script>
      
      <style>
        /* Light theme popup styles */
        .leaflet-popup-content-wrapper {
          background: white;
          color: #1f2937;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        
        .leaflet-popup-tip {
          background: white;
        }
        
        /* Dark theme popup styles */
        .dark .leaflet-popup-content-wrapper {
          background: #374151 !important;
          color: #f3f4f6 !important;
        }
        
        .dark .leaflet-popup-tip {
          background: #374151 !important;
        }
        
        .dark .leaflet-popup-close-button {
          color: #f3f4f6 !important;
        }
        
        .dark .leaflet-popup-close-button:hover {
          color: #d1d5db !important;
        }
        
        /* Improve text contrast in popups */
        .leaflet-popup-content .text-gray-600 {
          color: #4b5563 !important;
        }
        
        .dark .leaflet-popup-content .text-gray-600 {
          color: #d1d5db !important;
        }
        
        /* Modern zoom controls styling */
        .leaflet-control-zoom {
          border: none !important;
          box-shadow: none !important;
        }
        
        .leaflet-top.leaflet-left {
          top: 20px !important;
          left: 20px !important;
        }
        
        @media (max-width: 640px) {
          .leaflet-top.leaflet-left {
            display: none !important;
          }
          
          .leaflet-bottom.leaflet-left {
            bottom: 10px !important;
            left: 10px !important;
          }
          
          .leaflet-control-zoom {
            display: flex !important;
            flex-direction: row !important;
          }
          
          .leaflet-control-zoom a {
            margin: 0 1px !important;
          }
        }
        
        .leaflet-control-zoom a {
          background: white !important;
          color: #374151 !important;
          border: none !important;
          border-radius: 8px !important;
          margin: 2px !important;
          width: 32px !important;
          height: 32px !important;
          line-height: 30px !important;
          font-size: 18px !important;
          font-weight: 500 !important;
          transition: all 0.2s ease !important;
        }
        
        .leaflet-control-zoom a:hover {
          background: #f3f4f6 !important;
          color: #1f2937 !important;
          transform: scale(1.05) !important;
        }
        
        .leaflet-control-zoom a.leaflet-disabled {
          background: #f9fafb !important;
          color: #d1d5db !important;
        }
        
        /* Dark theme zoom controls */
        .dark .leaflet-control-zoom {
          box-shadow: none !important;
        }
        
        .dark .leaflet-control-zoom a {
          background: #374151 !important;
          color: #f3f4f6 !important;
        }
        
        .dark .leaflet-control-zoom a:hover {
          background: #4b5563 !important;
          color: #ffffff !important;
        }
        
        .dark .leaflet-control-zoom a.leaflet-disabled {
          background: #1f2937 !important;
          color: #6b7280 !important;
        }
        
        /* Hide attribution */
        .leaflet-control-attribution {
          display: none !important;
        }
        
        /* Fix z-index to not overlap navbar */
        .leaflet-container {
          z-index: 1 !important;
        }
        
        /* Lighten dark theme tiles */
        .dark .leaflet-tile {
          filter: brightness(1.3) contrast(0.9) !important;
        }
      </style>
      
      <script define:vars={{ postsWithCoords }}>
        // Shared helper functions (inlined for Astro compatibility)
        function createPopupContent(post, lang = 'en') {
          const readMoreText = lang === 'it' ? 'Leggi di pi√π ‚Üí' : 'Read more ‚Üí';
          const postUrl = lang === 'it' ? `/it/posts/${post.slug}/` : `/posts/${post.slug}/`;
          
          return `
            <div class="p-1 sm:p-2 w-full">
              ${post.cover ? `<img src="${post.cover}" alt="${post.title}" class="w-full h-16 sm:h-20 object-cover rounded mb-1 sm:mb-2">` : ''}
              <h3 class="font-semibold text-xs sm:text-sm mb-1 leading-tight">${post.title}</h3>
              <p class="text-xs text-gray-600 mb-1 sm:mb-2">${new Date(post.date).toLocaleDateString(lang === 'it' ? 'it-IT' : 'en-US')}</p>
              <a href="${postUrl}" class="inline-block text-xs text-blue-600 hover:text-blue-800 font-medium">${readMoreText}</a>
            </div>
          `;
        }

        function createMapIcons() {
          const lightIcon = L.divIcon({
            className: 'custom-marker light-marker',
            html: `
              <div style="
                width: 18px; 
                height: 18px; 
                background: #dc2626; 
                border: 2px solid white; 
                border-radius: 50%; 
                box-shadow: 0 2px 8px rgba(0,0,0,0.3);
              ">
              </div>
            `,
            iconSize: [18, 18],
            iconAnchor: [9, 9]
          });

          const darkIcon = L.divIcon({
            className: 'custom-marker dark-marker',
            html: `
              <div style="
                width: 18px; 
                height: 18px; 
                background: #e5e7eb; 
                border: 2px solid #374151; 
                border-radius: 50%; 
                box-shadow: 0 2px 8px rgba(0,0,0,0.4);
              ">
              </div>
            `,
            iconSize: [18, 18],
            iconAnchor: [9, 9]
          });

          return { lightIcon, darkIcon };
        }

        function createTileLayers() {
          const lightTiles = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
            attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors ¬© <a href="https://carto.com/attributions">CARTO</a>'
          });
          
          const darkTiles = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
            attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors ¬© <a href="https://carto.com/attributions">CARTO</a>'
          });
          
          return { lightTiles, darkTiles };
        }

        function setupMapTheme(map, lightTiles, darkTiles) {
          function updateMapTheme() {
            const isDark = document.documentElement.classList.contains('dark');
            if (isDark) {
              map.removeLayer(lightTiles);
              darkTiles.addTo(map);
            } else {
              map.removeLayer(darkTiles);
              lightTiles.addTo(map);
            }
          }
          
          // Set initial theme
          updateMapTheme();
          
          // Listen for theme changes
          const observer = new MutationObserver(updateMapTheme);
          observer.observe(document.documentElement, {
            attributes: true,
            attributeFilter: ['class']
          });
          
          return updateMapTheme;
        }

        function initializeMap() {
          if (typeof L === 'undefined') {
            setTimeout(initializeMap, 100);
            return;
          }
          const posts = postsWithCoords.map(post => ({
            title: post.data.title,
            slug: post.slug.replace('en/', ''),
            coords: post.mainCoords,
            date: post.data.eventTime,
            cover: post.data.cover
          }));

          // Remove loading indicator
          const loadingEl = document.getElementById('map-loading');
          if (loadingEl) loadingEl.remove();

          // Initialize the map with center based on first post or default to Italy
          const firstPost = posts[0];
          const initialCenter = firstPost ? [firstPost.coords.lat, firstPost.coords.lon] : [41.9028, 12.4964];
          const map = L.map('global-map', {
            zoomControl: false
          }).setView(initialCenter, 6);
          
          // Add zoom control in top left for desktop, bottom left for mobile
          const isMobile = window.innerWidth <= 640;
          L.control.zoom({
            position: isMobile ? 'bottomleft' : 'topleft'
          }).addTo(map);

          // Create tile layers and setup theme
          const { lightTiles, darkTiles } = createTileLayers();
          const updateMapTheme = setupMapTheme(map, lightTiles, darkTiles);

          // Create marker icons
          const { lightIcon, darkIcon } = createMapIcons();

          // Array to track markers
          const markers = [];

          // Add marker for each post
          posts.forEach((post, index) => {
            const isDark = document.documentElement.classList.contains('dark');
            const icon = isDark ? darkIcon : lightIcon;
            const marker = L.marker([post.coords.lat, post.coords.lon], { icon: icon }).addTo(map);
            
            const popupContent = `
              <div class="p-1 sm:p-2 w-full">
                ${post.cover ? `<img src="${post.cover}" alt="${post.title}" class="w-full h-16 sm:h-20 object-cover rounded mb-1 sm:mb-2">` : ''}
                <h3 class="font-semibold text-xs sm:text-sm mb-1 leading-tight">${post.title}</h3>
                <p class="text-xs text-gray-600 mb-1 sm:mb-2">${new Date(post.date).toLocaleDateString('en-US')}</p>
                <a href="/posts/${post.slug}/" class="inline-block text-xs text-blue-600 hover:text-blue-800 font-medium">Read more ‚Üí</a>
              </div>
            `;
            
            marker.bindPopup(popupContent);
            markers.push(marker);
            
            // Reverse geocoding to get location name for main coordinates
            fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${post.coords.lat}&lon=${post.coords.lon}&zoom=10&addressdetails=1`)
              .then(response => response.json())
              .then(data => {
                const locationButton = document.getElementById(`location-${index}`);
                if (locationButton && data.address) {
                  // Try to get city, town, village, or municipality
                  const location = data.address.city || 
                                 data.address.town || 
                                 data.address.village || 
                                 data.address.municipality || 
                                 data.address.county ||
                                 'Unknown location';
                  locationButton.textContent = `üìç ${location}`;
                }
              })
              .catch(() => {
                const locationButton = document.getElementById(`location-${index}`);
                if (locationButton) {
                  locationButton.textContent = `üìç View on map`;
                }
              });
          });

          // Global function to focus on a marker
          window.focusMarker = (index) => {
            const post = posts[index];
            const marker = markers[index];
            
            map.setView([post.coords.lat, post.coords.lon], 15);
            marker.openPopup();
          };

          // Function to update all markers
          function updateAllMarkers() {
            const isDark = document.documentElement.classList.contains('dark');
            const icon = isDark ? darkIcon : lightIcon;
            
            markers.forEach(marker => {
              marker.setIcon(icon);
            });
          }

          // Update markers when theme changes (extend existing function)
          const originalUpdateMapTheme = updateMapTheme;
          updateMapTheme = function() {
            originalUpdateMapTheme();
            updateAllMarkers();
          };

          // Fit bounds to show all markers
          if (markers.length > 1) {
            const group = new L.featureGroup(markers);
            map.fitBounds(group.getBounds().pad(0.1));
          }
        }
        
        // Try multiple loading strategies
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', initializeMap);
        } else {
          initializeMap();
        }
        
        // Fallback
        window.addEventListener('load', initializeMap);
      </script>
    </>
  )}
</Layout>