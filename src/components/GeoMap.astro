---
const { coords, locations } = Astro.props;
const hasLocations = (locations && locations.length > 0) || coords;
const mapId = hasLocations ? `map-${Date.now()}` : '';
---
{hasLocations ? (
  <div class="relative w-full h-80 bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden shadow-lg">
    <div id={mapId} class="w-full h-full"></div>
  </div>
  
  <link rel="stylesheet" href="/libs/leaflet/leaflet.css" is:inline />
  <script src="/libs/leaflet/leaflet.js" is:inline></script>
  
  <style>
    /* Light theme popup styles */
    .leaflet-popup-content-wrapper {
      background: white;
      color: #1f2937;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .leaflet-popup-tip {
      background: white;
    }
    
    /* Dark theme popup styles */
    .dark .leaflet-popup-content-wrapper {
      background: #374151 !important;
      color: #f3f4f6 !important;
    }
    
    .dark .leaflet-popup-tip {
      background: #374151 !important;
    }
    
    .dark .leaflet-popup-close-button {
      color: #f3f4f6 !important;
    }
    
    .dark .leaflet-popup-close-button:hover {
      color: #d1d5db !important;
    }
    
    /* Improve text contrast in popups */
    .leaflet-popup-content .text-gray-600 {
      color: #4b5563 !important;
    }
    
    .dark .leaflet-popup-content .text-gray-600 {
      color: #d1d5db !important;
    }
    
    /* Modern zoom controls styling */
    .leaflet-control-zoom {
      border: none !important;
      box-shadow: none !important;
    }
    
    .leaflet-control-zoom a {
      background: white !important;
      color: #374151 !important;
      border: none !important;
      border-radius: 8px !important;
      margin: 2px !important;
      width: 32px !important;
      height: 32px !important;
      line-height: 30px !important;
      font-size: 18px !important;
      font-weight: 500 !important;
      transition: all 0.2s ease !important;
    }
    
    .leaflet-control-zoom a:hover {
      background: #f3f4f6 !important;
      color: #1f2937 !important;
      transform: scale(1.05) !important;
    }
    
    .leaflet-control-zoom a.leaflet-disabled {
      background: #f9fafb !important;
      color: #d1d5db !important;
    }
    
    /* Dark theme zoom controls */
    .dark .leaflet-control-zoom {
      box-shadow: none !important;
    }
    
    .dark .leaflet-control-zoom a {
      background: #374151 !important;
      color: #f3f4f6 !important;
    }
    
    .dark .leaflet-control-zoom a:hover {
      background: #4b5563 !important;
      color: #ffffff !important;
    }
    
    .dark .leaflet-control-zoom a.leaflet-disabled {
      background: #1f2937 !important;
      color: #6b7280 !important;
    }
    
    /* Hide attribution */
    .leaflet-control-attribution {
      display: none !important;
    }
    
    /* Fix z-index to not overlap navbar */
    .leaflet-container {
      z-index: 1 !important;
    }
    
    /* Lighten dark theme tiles */
    .dark .leaflet-tile {
      filter: brightness(1.3) contrast(0.9) !important;
    }
  </style>
  
  <script define:vars={{ coords, locations, mapId }} is:inline>
    function initializeGeoMap() {
      console.log('Attempting to initialize GeoMap...', typeof L);
      if (typeof L === 'undefined') {
        console.log('Leaflet not ready for GeoMap, retrying...');
        setTimeout(initializeGeoMap, 100);
        return;
      }
      console.log('Leaflet loaded, initializing GeoMap...');
      
      // Determine locations to display
      const locationsToShow = locations && locations.length > 0 ? locations : 
                              coords ? [{name: 'Location', coords: coords, isMain: true}] : [];
      
      if (locationsToShow.length === 0) return;
      
      // Initialize the map centered on the main location or first location
      const mainLocation = locationsToShow.find(loc => loc.isMain) || locationsToShow[0];
      const map = L.map(mapId).setView([mainLocation.coords.lat, mainLocation.coords.lon], 15);
      
      // Light and dark tile layers
      const lightTiles = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
        attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
      });
      
      const darkTiles = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
        attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors © <a href="https://carto.com/attributions">CARTO</a>'
      });
      
      // Function to update map theme
      function updateMapTheme() {
        const isDark = document.documentElement.classList.contains('dark');
        if (isDark) {
          map.removeLayer(lightTiles);
          darkTiles.addTo(map);
        } else {
          map.removeLayer(darkTiles);
          lightTiles.addTo(map);
        }
      }
      
      // Set initial theme
      updateMapTheme();
      
      // Listen for theme changes
      const observer = new MutationObserver(updateMapTheme);
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['class']
      });
      
      // Create custom marker icons
      const lightIcon = L.divIcon({
        className: 'custom-marker light-marker',
        html: `
          <div style="
            width: 18px; 
            height: 18px; 
            background: #dc2626; 
            border: 2px solid white; 
            border-radius: 50%; 
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
          ">
          </div>
        `,
        iconSize: [18, 18],
        iconAnchor: [9, 9]
      });

      const darkIcon = L.divIcon({
        className: 'custom-marker dark-marker',
        html: `
          <div style="
            width: 18px; 
            height: 18px; 
            background: #e5e7eb; 
            border: 2px solid #374151; 
            border-radius: 50%; 
            box-shadow: 0 2px 8px rgba(0,0,0,0.4);
          ">
          </div>
        `,
        iconSize: [18, 18],
        iconAnchor: [9, 9]
      });

      // Add markers for all locations
      const markers = [];
      
      function updateMarkers() {
        const isDark = document.documentElement.classList.contains('dark');
        const icon = isDark ? darkIcon : lightIcon;
        
        // Clear existing markers
        markers.forEach(marker => map.removeLayer(marker));
        markers.length = 0;
        
        // Add markers for all locations
        locationsToShow.forEach(location => {
          const marker = L.marker([location.coords.lat, location.coords.lon], { icon: icon }).addTo(map);
          marker.bindPopup(`<strong>${location.name}</strong><br>Coordinates: ${location.coords.lat}, ${location.coords.lon}`);
          markers.push(marker);
        });
        
        // Adjust map view if multiple locations
        if (markers.length > 1) {
          const group = new L.featureGroup(markers);
          map.fitBounds(group.getBounds().pad(0.1));
        }
      }

      // Set initial markers
      updateMarkers();
      
      // Update markers when theme changes (reuse the existing observer)
      const originalUpdateMapTheme = updateMapTheme;
      updateMapTheme = function() {
        originalUpdateMapTheme();
        updateMarkers();
      };
    }
    
    // Try multiple loading strategies
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeGeoMap);
    } else {
      initializeGeoMap();
    }
    
    // Fallback
    window.addEventListener('load', initializeGeoMap);
  </script>
) : null}
