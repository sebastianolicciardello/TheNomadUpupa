---
const { music, lang } = Astro.props;
const currentLang = lang || 'en';
const hasMusic = music && music.url;

let videoId = null;
let cleanUrl = null;

if (hasMusic) {
  const videoIdMatch = music.url.match(/[?&]v=([a-zA-Z0-9_-]+)/);
  if (videoIdMatch) {
    videoId = videoIdMatch[1];
    cleanUrl = music.url.replace(/&amp;/g, '&');
  }
}

const description = hasMusic && music.description ?
  (typeof music.description === 'string'
    ? music.description  // Already processed by resolveMultilingualData
    : (currentLang === 'it' ? music.description.it : music.description.en)) : null;

// Convert line breaks to HTML paragraphs for better formatting
const formattedDescription = description ?
  description.split('\n\n')
    .filter((p: string) => p.trim())
    .map((p: string) => `<p>${p.trim()}</p>`)
    .join('') : null;
---

{hasMusic && videoId ? (
  <div class="music-player-section">
    <div class="youtube-music-player my-4 not-prose max-w-md mx-auto">
      <div class="flex items-center gap-3 p-3 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 shadow-lg hover:shadow-xl transition-all duration-200">
        <div class="flex-shrink-0">
          <img 
            src={`https://img.youtube.com/vi/${videoId}/mqdefault.jpg`}
            alt="Album Cover" 
            class="w-12 h-12 rounded-lg object-cover" 
          />
        </div>
        <div class="flex-1 min-w-0 mr-2">
          <p class="text-sm font-semibold text-gray-900 dark:text-gray-100 truncate leading-tight" id={`title-${videoId}-${currentLang}`}>
            ðŸŽµ Caricamento...
          </p>
          <p class="text-sm text-gray-500 dark:text-gray-400 truncate mt-1" id={`artist-${videoId}-${currentLang}`}>
            YouTube Music
          </p>
        </div>
        <button 
          class="music-play-btn flex-shrink-0 p-2 text-red-500 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-full transition-all hover:scale-110 active:scale-95"
          data-url={cleanUrl}
          data-video-id={`${videoId}-${currentLang}`}
          title="Ascolta su YouTube Music"
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M8 5v14l11-7z"/>
          </svg>
        </button>
      </div>
    </div>
    
    {formattedDescription && (
      <div class="prose prose-lg prose-gray dark:prose-invert max-w-none mt-4
                  prose-p:text-gray-700 dark:prose-p:text-gray-300 prose-p:leading-relaxed
                  prose-a:text-warm-600 dark:prose-a:text-warm-400 prose-a:no-underline hover:prose-a:underline"
           set:html={formattedDescription} />
    )}
  </div>

  <script define:vars={{ videoId, cleanUrl, currentLang }} is:inline>
    function initializeMusicPlayer() {
      if (typeof window === 'undefined') return;
      
      // Load metadata
      function loadMusicMetadata(videoId) {
        fetch(`https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`)
          .then(response => response.json())
          .then(data => {
            const titleElement = document.getElementById(`title-${videoId}-${currentLang}`);
            const artistElement = document.getElementById(`artist-${videoId}-${currentLang}`);
            
            if (titleElement && data.title) {
              // Clean up the title
              let cleanTitle = data.title
                .replace(/\s*-\s*Topic$/, '')
                .replace(/\s*\(Official.*?\)$/i, '')
                .replace(/\s*\[Official.*?\]$/i, '')
                .replace(/\s*- YouTube Music$/, '');
              
              // Parse "Artist - Title" format
              const dashIndex = cleanTitle.indexOf(' - ');
              
              if (dashIndex > 0) {
                const artist = cleanTitle.substring(0, dashIndex).trim();
                const song = cleanTitle.substring(dashIndex + 3).trim();
                artistElement.textContent = artist;
                titleElement.textContent = song;
              } else {
                titleElement.textContent = cleanTitle;
                if (data.author_name) {
                  let cleanAuthor = data.author_name.replace(/\s*-\s*Topic$/, '');
                  artistElement.textContent = cleanAuthor;
                }
              }
            }
          })
          .catch(() => {
            // Keep fallback text on error
          });
      }

      // Add click handler
      const playButton = document.querySelector('[data-video-id="' + videoId + '-' + currentLang + '"]');
      if (playButton) {
        playButton.addEventListener('click', function() {
          const url = this.getAttribute('data-url');
          if (url) {
            window.open(url, '_blank');
          }
        });
        
        // Load metadata
        loadMusicMetadata(videoId);
      }
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeMusicPlayer);
    } else {
      initializeMusicPlayer();
    }
  </script>
) : null}